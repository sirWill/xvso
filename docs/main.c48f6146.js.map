{"version":3,"sources":["src/js/Game.js","src/js/main.js"],"names":["Game","settings","field","fieldSize","cellSize","winnerLength","fieldElement","document","getElementById","currentPlayerEl","sizeSettingsEl","querySelector","winnerSettingsEl","current","steps","stats","X","Y","makeStep","e","button","target","i","getAttribute","j","innerHTML","setAttribute","classList","add","toLowerCase","checkVictory","row","column","DIFFERENCE","dif","x","y","directions","NW","dx","dy","N","NE","E","SE","S","SW","W","direction","parseInt","opposites","one","alert","gameWon","children","makeField","clearField","push","Array","style","width","height","length","createElement","fontSize","addEventListener","append","resetGame","settingsListener","value"],"mappings":"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","file":"main.c48f6146.js","sourceRoot":"..","sourcesContent":["/**\n * \"Класс\" игры\n */\nfunction Game() {\n  // Константы с параметрами игры\n  let settings = {\n    /** Размер поля */\n    fieldSize: 10,\n    /** Размер клетки поля в px */\n    cellSize: 50,\n    /** Длина выигрышной последовательности */\n    winnerLength: 5\n  };\n\n  let fieldElement = document.getElementById(\"field\"),\n    currentPlayerEl = document.getElementById(\"currentPlayer\"),\n    sizeSettingsEl = document.querySelector('input[name=\"size\"]'),\n    winnerSettingsEl = document.querySelector('input[name=\"winner\"]');\n\n  /** Массив с массивами для хранения поля */\n  let field;\n  /** Текущий игрок */\n  let current = \"X\";\n  /** Счетчик ходов в игре */\n  let steps = 0;\n\n  /** Объект для хранения статистики */\n  let stats = {\n    X: 0,\n    Y: 0\n  };\n\n  /**\n   * Очистка всего поля и инициализация всех клеток поля нулями\n   */\n  function clearField() {\n    field = [];\n    for (let i = 0; i < settings.fieldSize; i++) {\n      field.push(new Array());\n      for (let j = 0; j < settings.fieldSize; j++) {\n        field[i].push(0);\n      }\n    }\n  }\n\n  /**\n   * Функция для расчета хода\n   *\n   * @param {MouseEvent} e\n   */\n  function makeStep(e) {\n    // Делаем ход\n    let button = e.target;\n    let i = button.getAttribute(\"row\"),\n      j = button.getAttribute(\"col\");\n    field[i][j] = current;\n    button.innerHTML = current;\n    button.setAttribute(\"disabled\", true);\n    button.classList.add(\"-\" + current.toLowerCase());\n    steps++;\n    // Проверяем выигрыш, если он возможен\n    if (steps >= settings.winnerLength * 2 - 1) {\n      if (checkVictory(i, j)) {\n        return;\n      }\n      // Ничья?\n      if (steps === settings.fieldSize * settings.fieldSize) {\n        alert(\"Ничья!\");\n      }\n    }\n    // Смена игрока\n    if (current === \"X\") {\n      current = \"O\";\n    } else {\n      current = \"X\";\n    }\n    currentPlayerEl.innerHTML = current;\n  }\n\n  /**\n   * Что происходит при завершении игры\n   */\n  function gameWon() {\n    // Обойти и заблокировать все клетки поля\n    for (let i in field) {\n      for (let j in field) {\n        i = parseInt(i);\n        j = parseInt(j);\n        if (field[i][j] === 0) {\n          fieldElement.children[i * settings.fieldSize + j].setAttribute(\n            \"disabled\",\n            true\n          );\n        }\n      }\n    }\n    // Добавить данные в статистику побед\n    stats[current]++;\n  }\n\n  /**\n   * Функция для проверки победы в игре\n   *\n   * @param {*} row\n   * @param {*} column\n   */\n  function checkVictory(row, column) {\n    const DIFFERENCE = settings.winnerLength - 1;\n    // Вокруг ячейки, где был совершен ход\n    // Объект со смещениями по направлениям\n    let directions = {\n      NW: {\n        dx: -1,\n        dy: -1,\n        current: 0\n      },\n      N: {\n        dx: 0,\n        dy: -1,\n        current: 0\n      },\n      NE: {\n        dx: 1,\n        dy: -1,\n        current: 0\n      },\n      E: {\n        dx: 1,\n        dy: 0,\n        current: 0\n      },\n      SE: {\n        dx: 1,\n        dy: 1,\n        current: 0\n      },\n      S: {\n        dx: 0,\n        dy: 1,\n        current: 0\n      },\n      SW: {\n        dx: -1,\n        dy: 1,\n        current: 0\n      },\n      W: {\n        dx: -1,\n        dy: 0,\n        current: 0\n      }\n    };\n    // Последовательно проверить по кругу все направления\n    let winCounter = 1;\n    let dif, x, y;\n    for (let direction in directions) {\n      dif = 0;\n      y = parseInt(row);\n      x = parseInt(column);\n      do {\n        // Смещаемся по направлению\n        y += directions[direction].dy;\n        x += directions[direction].dx;\n        dif++;\n        // Если вышли за границыы поля - переходим к следующему направлению\n        if (\n          y < 0 ||\n          x < 0 ||\n          y >= settings.fieldSize ||\n          x >= settings.fieldSize\n        )\n          break;\n        // Если символ такой же, как у текущего игрока\n        if (field[y][x] === current) {\n          // Увеличиваем счётчик данного направления\n          directions[direction].current++;\n        } else {\n          // Иначе выходим из цикла и идем к следующему направлению\n          dif = settings.winnerLength;\n        }\n      } while (dif < settings.winnerLength);\n    }\n    // Противоположные направления\n    let opposites = [\n      [\"NW\", \"SE\"],\n      [\"N\", \"S\"],\n      [\"NE\", \"SW\"],\n      [\"E\", \"W\"]\n    ];\n    // Проверяем суммы противоположных направлений\n    for (let one of opposites) {\n      if (\n        directions[one[0]].current + directions[one[1]].current ===\n        DIFFERENCE\n      ) {\n        // Есть победитель!\n        alert(\"Вы победили! Поздравляем \" + current + \" с победой!\");\n        gameWon();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Отрисовка чистого игрового поля\n   */\n  function makeField() {\n    let i, j;\n    clearField();\n    fieldElement.innerHTML = \"\";\n    fieldElement.style.width = fieldElement.style.height =\n      settings.fieldSize * settings.cellSize + \"px\";\n\n    for (i = 0; i < field.length; i++) {\n      for (j = 0; j < field[i].length; j++) {\n        let button = document.createElement(\"button\");\n        button.setAttribute(\"row\", i);\n        button.setAttribute(\"col\", j);\n        button.style.width = settings.cellSize + \"px\";\n        button.style.height = settings.cellSize + \"px\";\n        button.style.fontSize = settings.cellSize * 0.8 + \"px\";\n        button.addEventListener(\"click\", makeStep);\n        fieldElement.append(button);\n      }\n    }\n  }\n\n  /**\n   * перезапуск игры\n   */\n  function resetGame() {\n    steps = 0;\n    current = \"X\";\n    currentPlayerEl.innerHTML = current;\n    makeField();\n  }\n\n  function settingsListener() {\n    let fieldSize = parseInt(sizeSettingsEl.value);\n    let winnerLength = parseInt(winnerSettingsEl.value);\n    settings.fieldSize = fieldSize;\n    settings.winnerLength = winnerLength;\n  }\n\n  function init() {\n    // Устанавливаем прослушивателей событий\n    document.getElementById(\"newGame\").addEventListener(\"click\", resetGame);\n\n    sizeSettingsEl.addEventListener(\"change\", settingsListener);\n    winnerSettingsEl.addEventListener(\"change\", settingsListener);\n\n    // Стартуем игру\n    resetGame();\n  }\n\n  // Инициализируем игру\n  init();\n}\n\nexport default Game;\n","// Подключаем файл с описанием игры\nimport Game from \"./Game\";\n\n// Запускаем игру\nnew Game();\n"]}